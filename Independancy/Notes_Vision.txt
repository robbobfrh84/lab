STEP 1: prototype foundation
- keep doing what your doing
- when you get to a point where you feel good, you should re-write this
- Get to building a Repo ASAP AND understand complete version control, how to go back etc…
- it should exist as a SOLID repo before building any type of website.
- OK to jump around. That’s what I want more than anything. In CONTROL, but really free for me to bounce around
- that’s why I’ve got to be crafty in how i make changes/ implement new things. it should be loose, but well organized.

MY quotes / terms / ideas
- Conjoined function : a function that is too specific to another function that calls it. rendering it
  useless to other uses later on.

*This folder (independency) will be the main resource & moved to a github repo
!!! HOT IDEAS !!!
-  Write a Node.js program that watches your folder, and AUTOmatically adds the function to your  library.
- more? Snippets addition (make snippet for EVERY function in the your lib. Why? you may need to see wha the params are, so just doing  more? someFunction() will be really nice as to not have to nevegate to the folder and checkout the actual file.

——— Use Case ———
- Generic
	- start a new project with a geric file structure that copy and paste
	- as you want functionality, you copy it from the library into the mirrored folder and your done.
	- Write a Node.js program that watches your folder, and AUTOmatically adds the function to 	  your library

——— Tech Purpose / Goal ———

- To create a resource for building SPAs with ONLY… HTML (+Canvas)  / CSS / JS(ES6)
- backend ?
- Will included
	- SPA source code for multi-page .html and dynamic development with classes
		- *MAYBE one large css / js files and use accordean in atom to jump around)
	- style templates for widgets *I’ll call bits
	- best practices sheet (Start below)
	- and more

——— Initial Sprint ———(build it to work FIRST, then clean / destroy element research )

- Set up raw bones for…
	- Embeded HTML tags
		- Test structure ( index —> <page1></page1>
						<page2> <page3> </page3> </page2>

	- JS for conditional html tags x-if=“ … “
	- JS for HTML arrays
	- JS for HTML objects
	- JS for dynic vars x{ … }x
	- Basic Pass vars to
	- Basic Pass vars Back
	- basic api func (CRUD)

——— dynamic .html IDEAS ———

	- x-if=“ …  “
	- x-each=“ … ”
	- inside html tags for vars >>> 	x{ myCoolVar }x
