NOTE(May 8th, 2017): Realized with the addition of the anime-GFX-Lab, some things should be moved there that aren’t directly related to pure copy/paste functionality. This brings into question where or not we want to have templets/tutorials within the IndyJS directory at all. Rather create a tutorial repo in github where that’d live…

NOTE(May 9th, 2017): keep canvas-lab, but add a clean canvas.js class. 
NOTE(May 9th, 2017): class naming convention single letter repeats hH (htmlJS) cC canvas  
NOTE(May 9th, 2017): Once me make the IndyJS repo, remove the labs that get merged and just work on new features/tweeks/bugs from there. stuff that isn’t implemented should go into the normal labs repo on github, NOT in the indyJS/labs repo. that should be removed.

*** Tech Purpose / Goal ***
- To create a resource for building SPAs with ONLY… HTML (+Canvas)  / CSS / JS(ES6)
- OK to jump around. That’s what I want more than anything. In CONTROL, but really free 
  for me to bounce around. that’s why I’ve got to be crafty in how i make changes/implement 
  new things. it should be loose, but well organized.
- backend ? (NO, this isn’t related to back end. that will just stand alone. You’ve never 
  done it so you’ll need to approach backend with an open *dependancy* frame work. better to 
  have Goland and Node.js projects n e way. FE boils down to JS, luckily in this world, as   
  chaotic as it is, JS is the controlling founcation, and oddly, the BE is stands alone by 
  several different code.
- Will include a General Docs with function names, attributes, parameters and other notes in 
  a markdown doc.


*** Sprint 1: prototype foundation ***
- keep doing what your doing (file being proposed and work-on in “hack-a-thon mode”)
  - html imports
  - htmlJS (finalize and move to review folder.)
    - Create a special place for to-do later, or notes and questions (github issue???)
      for things like… for=“v,k,i obj” vs. — for=“v Obj” key=“k” index=“i”
    - Also, create a well organized place for need to know(github issues) like: closures? why? 
  - AJAX API calls (this is actually already done pretty clean in my old code_hub.
  - Generic SPA template.  
- when you get to a point where you feel good, you should re-write this.
- pass all files and functions from review into structured directory.
- This folder (independency) will be the main resource & moved to a github repo…
  ^^^ (Name change? indyJS)
- Get to building a Repo ASAP AND understand complete version control, how to go back etc…


*** MY quotes / terms / ideas ***
- Conjoined function : a function that is too specific to another function that calls it. 
  Rendering it useless to other uses later on.

*** HOT IDEAS ***
- Write a Node.js program that watches your folder, and AUTOmatically adds the function to your  
  library.
- more? Snippets addition (make snippet for EVERY function in the your lib. Why? you may need 
  to see wha the params are, so just doing  more? someFunction() will be really nice as to not
  have to nevegate to the folder and checkout the actual file.
- Write a Node.js program that watches your folder, and AUTOmatically adds the function to 
  your library


*** Use Case ***
- Generic: start a new project with a standard file structure and copy and paste functions as     
  you want to add functionality, you copy it from the library into the mirrored folder and your   
  done. You can search through and reference the docs page to get more info.
- potentially use custom snippets to speed up implementation.